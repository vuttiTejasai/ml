
import csv
import random
import math
defloadcsv(filename):
	lines = csv.reader(open(filename, "r"));
	dataset = list(lines)
	fori in range(len(dataset)):
		dataset[i] = [float(x) for x in dataset[i]]
	return dataset
defsplitdataset(dataset, splitratio):
	trainsize = int(len(dataset) * splitratio);
	trainset = []
	copy = list(dataset);    
	whilelen(trainset) <trainsize:
		index = random.randrange(len(copy));       
		trainset.append(copy.pop(index))    
	return [trainset, copy]
defseparatebyclass(dataset):
	separated = {} 
	fori in range(len(dataset)):
		vector = dataset[i]
		if (vector[-1] not in separated):
			separated[vector[-1]] = []
		separated[vector[-1]].append(vector)
	return separated
def mean(numbers):
	return sum(numbers)/float(len(numbers)) 
defstdev(numbers):
	avg = mean(numbers)
	variance = sum([pow(x-avg,2) for x in numbers])/float(len(numbers)-1)
	returnmath.sqrt(variance)
def summarize(dataset): 
	summaries = [(mean(attribute), stdev(attribute)) for attribute in zip(*dataset)];
	del summaries[-1] 
	return summaries
defsummarizebyclass(dataset):
	separated = separatebyclass(dataset); 
	summaries = {}
	forclassvalue, instances in separated.items():       
		summaries[classvalue] = summarize(instances) 
	return summaries
defcalculateprobability(x, mean, stdev):
	exponent = math.exp(-(math.pow(x-mean,2)/(2*math.pow(stdev,2))))
	return (1 / (math.sqrt(2*math.pi) * stdev)) * exponent
defcalculateclassprobabilities(summaries, inputvector):
	probabilities = {} 
	forclassvalue, classsummaries in summaries.items():
		probabilities[classvalue] = 1
		fori in range(len(classsummaries)):
			mean, stdev = classsummaries[i]  
			x = inputvector[i] 
			probabilities[classvalue] *= calculateprobability(x, mean, stdev);
	return probabilities		
def predict(summaries, inputvector): 
	probabilities = calculateclassprobabilities(summaries, inputvector)
	bestLabel, bestProb = None, -1
	forclassvalue, probability in probabilities.items():
		ifbestLabel is None or probability >bestProb:
			bestProb = probability
			bestLabel = classvalue
	returnbestLabel
defgetpredictions(summaries, testset):
	predictions = []
	fori in range(len(testset)):
		result = predict(summaries, testset[i])
		predictions.append(result)
	return predictions
defgetaccuracy(testset, predictions):
	correct = 0
	fori in range(len(testset)):
		iftestset[i][-1] == predictions[i]:
			correct += 1
	return (correct/float(len(testset))) * 100.0
def main():
	filename = 'naivedata.csv'
	splitratio = 0.67
	dataset = loadcsv(filename);
	trainingset, testset = splitdataset(dataset, splitratio)
	print('Split {0} rows into train={1} and test={2} rows'.format(len(dataset), len(trainingset), len(testset)))	
	summaries = summarizebyclass(trainingset);    
	predictions = getpredictions(summaries, testset) 
	accuracy = getaccuracy(testset, predictions)
	print('Accuracy of the classifier is : {0}%'.format(accuracy))

main()


output:
Split 767 rows into train=513 and test=254 rows
Accuracy of the classifier is : 74.80314960629921%
